package main

import (
	"log"
	"os"
	"text/template"
)

func createMain() string {
	var strtemplate string
	if config.Database.Server == mySQL {

		strtemplate = `
			package main

			import (
				"github.com/gin-gonic/gin"
				_ "github.com/jinzhu/gorm/dialects/mysql"
				"{{.Package}}/database"
				"{{.Package}}/handlers"
				"github.com/shouva/dailyhelper"
			)
			
			func main() {
				// connect to db
				var config Config
				dailyhelper.ReadConfig(dailyhelper.GetCurrentPath(false)+"/config.json", &config)
				cDB := config.Database
				db, _ := database.New(cDB.Host, cDB.Port, cDB.DBName, cDB.User, cDB.Password)
			
				handler := handlers.NewHandler(db)
			
				r := gin.New()
			
				gin.SetMode(gin.DebugMode)
			
				r.GET("/", func(c *gin.Context) {
					c.JSON(200, gin.H{
						"message": "this api generated by apicreator. supported by OtoRitech"})
				})

				rgroup := r.Group("/api")
				combinerouter(rgroup, handler)
				r.Run()
			}
			
			
			`
	} else if config.Database.Server == msSQL {
		strtemplate = `
			package main

			import (
				"github.com/gin-gonic/gin"
				_ "github.com/jinzhu/gorm/dialects/mssql"
				"{{.Package}}/database"
				"{{.Package}}/handlers"
				"github.com/shouva/dailyhelper"
			)
			
			func main() {
				// connect to db
				var config Config
				dailyhelper.ReadConfig(dailyhelper.GetCurrentPath(false)+"/config.json", &config)
				cDB := config.Database
				db, _ := database.New(cDB.Host, cDB.Port, cDB.DBName, cDB.User, cDB.Password)
			
				handler := handlers.NewHandler(db)
			
				r := gin.New()
			
				gin.SetMode(gin.DebugMode)
			
				r.GET("/", func(c *gin.Context) {
					c.JSON(200, gin.H{
						"message": "this api generated by apicreator. supported by OtoRitech"})
				})

				rgroup := r.Group("/api")
				combinerouter(rgroup, handler)
				r.Run()
			}
			
	
	`
	}
	tmpl := template.New("create api template")
	tmpl, err := tmpl.Parse(strtemplate)
	if err != nil {
		log.Fatal("Parse: ", err)
		return ""
	}

	// openfile
	// filename := helper.GetCurrentPath(false) + "/out/main.go"
	filename := folder + "/main.go"
	f, err := os.Create(filename)
	defer f.Close()
	if err != nil {
		log.Println("create file: ", err)
		return ""
	}

	// var strout string
	err = tmpl.Execute(f, &config)

	if err != nil {
		log.Fatal("Execute: ", err)
		return ""
	}
	f.Close()
	completer(filename)
	return ""
}
